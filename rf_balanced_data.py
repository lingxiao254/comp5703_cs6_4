# -*- coding: utf-8 -*-
"""RF_balanced_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lJG_7QNUIatwVxzuAvzzXiXk_m02tuGF
"""

# Use GPU
import os
os.environ["CUDA_VISIBLE_DEVICES"] = "0"

!apt-get install -y -qq software-properties-common python-software-properties module-init-tools
!add-apt-repository -y ppa:alessandro-strada/ppa 2>&1 > /dev/null
!apt-get update -qq 2>&1 > /dev/null
!apt-get -y install -qq google-drive-ocamlfuse fuse
from google.colab import auth
auth.authenticate_user()
from oauth2client.client import GoogleCredentials
creds = GoogleCredentials.get_application_default()
import getpass
!google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret} < /dev/null 2>&1 | grep URL
vcode = getpass.getpass()
!echo {vcode} | google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret}

!mkdir -p drive
!google-drive-ocamlfuse -o nonempty drive

from google.colab import drive
drive.mount('/content/drive')

import os
os.getcwd()
os.chdir('/content/drive/My Drive/')
os.getcwd()

#import library
from glob import glob
import pandas as pd
import numpy as np
import fnmatch
import cv2
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from imblearn.under_sampling import RandomUnderSampler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
from sklearn import metrics

x_sub=np.load('X.npy')
y_sub=np.load('Y.npy')

x_sub = np.array(x_sub)
x_sub_shape = x_sub.shape[1] * x_sub.shape[2] * x_sub.shape[3]
x_flat = x_sub.reshape(x_sub.shape[0], x_sub_shape)
r = pd.value_counts(y_sub)
print(r)

rus=RandomUnderSampler(ratio='auto')
x_flat_resample,y_sub_resample=rus.fit_sample(x_flat,y_sub)
len(x_flat_resample)
r = pd.value_counts(y_sub_resample)
print(r)

#split
x_train,x_test,y_train,y_test=train_test_split(x_flat_resample,y_sub_resample,test_size=0.2)

#random forest
rf=RandomForestClassifier(n_estimators=20,max_depth=50,max_features='auto')
rf.fit(x_train,y_train)

test_prediction=rf.predict(x_test)
print(accuracy_score(y_test,test_prediction))
print(confusion_matrix(y_test,test_prediction))
print(metrics.classification_report(y_test,test_prediction))

#Tuning Parameter
test1={'n_estimators':range(10,100,10)}
grid_search1 = GridSearchCV(estimator = RandomForestClassifier(min_samples_split=100,min_samples_leaf=20,max_depth=8,max_features='auto' ,random_state=20),param_grid =test1, scoring='roc_auc',cv=5)
grid_search1.fit(x_train,y_train)
grid_search1.best_params_
rf1=RandomForestClassifier(n_estimators=90,max_depth=8,min_samples_split=100,max_features='auto')
rf1.fit(x_train,y_train)
test_prediction1=rf1.predict(x_test)
print('accuracy_1:',accuracy_score(y_test,test_prediction1))

test2 = {'max_depth':range(50,201,50), 'min_samples_split':range(50,201,50)}
grid_search2= GridSearchCV(estimator = RandomForestClassifier(n_estimators= 90,min_samples_leaf=20,max_features='sqrt' ,oob_score=True, random_state=20),param_grid=test2, scoring='roc_auc',iid=False, cv=5)
grid_search2.fit(x_train,y_train)
grid_search2.best_params_
rf2=RandomForestClassifier(n_estimators=90,max_depth=50,min_samples_split=50,max_features='auto')
rf2.fit(x_train,y_train)
test_prediction2=rf2.predict(x_test)
print('accuracy_2:',accuracy_score(y_test,test_prediction2))

test3={'min_samples_split':range(10,100,30), 'min_samples_leaf':range(10,100,30)}
grid_search3 = GridSearchCV(estimator = RandomForestClassifier(n_estimators= 90, max_depth=50,max_features='auto' ,oob_score=True, random_state=20),param_grid =test3, scoring='roc_auc',iid=False, cv=5)
grid_search3.fit(x_train,y_train)
grid_search3.best_params_

rf3=RandomForestClassifier(n_estimators=90,max_depth=50,min_samples_split=10,min_samples_leaf=10,max_features='auto')
rf3.fit(x_train,y_train)
test_prediction3=rf3.predict(x_test)
print('accuracy_3:',accuracy_score(y_test,test_prediction3))
print(confusion_matrix(y_test,test_prediction3))
print(metrics.classification_report(y_test,test_prediction3))

